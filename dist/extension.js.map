{"version":3,"file":"extension.js","mappings":"25BAwEA,oBAAyBA,GAGjBC,QAAQC,IAAI,gEAIZC,EAAOC,OAAOC,eAAe,kBAAmB,CACxCC,iBAAkBC,IAM1B,MAAMC,EAAaL,EAAOM,SAASC,gBAAgB,0BAA0B,KAGrEP,EAAOC,OAAOO,uBAAuB,iBAAiB,IAG9DX,EAAQY,cAAcC,KAAKL,EACnC,EAGA,wBAA8B,EAxF9B,kBACA,YACA,YAKA,MAAaM,EACGC,qBAAuF,IAAIZ,EAAOa,aAGjGC,oBAA+EC,KAAKH,qBAAqBI,MAElH,WAAAC,CAAYC,GACJ,OAAOA,CACf,CAEA,WAAAC,CAAYD,GACJ,IAAKA,EAAS,CACN,MAAME,EAAgBpB,EAAOqB,UAAUC,mBAAmB,GAAGC,IAAIC,OACjE,IAAKJ,EACG,MAAO,GAGf,MAAMK,EAAmBC,EAAKC,KAAKP,EAAe,eAClD,IAAKQ,EAAGC,WAAWJ,GACX,MAAO,GAGf,MACMK,EADcF,EAAGG,aAAaN,EAAkB,QAC5BO,MAAM,MAC1BC,EAA8B,GAEpC,IAAK,MAAMC,KAAQJ,EACX,GAAII,EAAKC,WAAW,MAAO,CACnB,MAAMC,EAAeF,EAAKG,UAAU,GACpCJ,EAASvB,KAAK,IAAIV,EAAOsC,SAASF,GAC1C,CAGR,OAAOH,CACf,CAEA,MAAO,EACf,CAEA,OAAAM,GACQxB,KAAKH,qBAAqB4B,MAClC,EAzCR,2BA4CA,MAAMpC,EAAe,IAAIO,EAEnBS,EAAgBpB,EAAOqB,UAAUC,mBAAmB,GAAGC,IAAIC,OACjE,GAAIJ,EAAe,CACX,MAAMK,EAAmBC,EAAKC,KAAKP,EAAe,eAC9CQ,EAAGC,WAAWJ,IACMzB,EAAOqB,UAAUoB,wBAAwBhB,GACjDiB,aAAY,KACZtC,EAAamC,SAAS,GAG9C,C,UCtEAI,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://code-kanban/./src/extension.ts","webpack://code-kanban/external commonjs \"vscode\"","webpack://code-kanban/external node-commonjs \"fs\"","webpack://code-kanban/external node-commonjs \"path\"","webpack://code-kanban/webpack/bootstrap","webpack://code-kanban/webpack/startup"],"sourcesContent":["/*\n * @Date: 2025-03-19 21:24:35\n * @LastEditors: Zhang Yueqian<zhangyueqian@antiy.cn>\n * @LastEditTime: 2025-03-20 19:40:48\n * @FilePath: /code-kanban/src/extension.ts\n */\n// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\n\nexport class KanbanProjectsProvider implements vscode.TreeDataProvider<vscode.TreeItem> {\n        private _onDidChangeTreeData: vscode.EventEmitter<vscode.TreeItem | undefined | null | void> = new vscode.EventEmitter<\n                vscode.TreeItem | undefined | null | void\n        >();\n        readonly onDidChangeTreeData: vscode.Event<vscode.TreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n        getTreeItem(element: vscode.TreeItem): vscode.TreeItem | Thenable<vscode.TreeItem> {\n                return element;\n        }\n\n        getChildren(element?: vscode.TreeItem | undefined): vscode.ProviderResult<vscode.TreeItem[]> {\n                if (!element) {\n                        const workspaceRoot = vscode.workspace.workspaceFolders?.[0].uri.fsPath;\n                        if (!workspaceRoot) {\n                                return [];\n                        }\n\n                        const projectsFilePath = path.join(workspaceRoot, \"Projects.md\");\n                        if (!fs.existsSync(projectsFilePath)) {\n                                return [];\n                        }\n\n                        const fileContent = fs.readFileSync(projectsFilePath, \"utf8\");\n                        const lines = fileContent.split(\"\\n\");\n                        const projects: vscode.TreeItem[] = [];\n\n                        for (const line of lines) {\n                                if (line.startsWith(\"# \")) {\n                                        const projectTitle = line.substring(2);\n                                        projects.push(new vscode.TreeItem(projectTitle));\n                                }\n                        }\n\n                        return projects;\n                }\n\n                return [];\n        }\n\n        refresh(): void {\n                this._onDidChangeTreeData.fire();\n        }\n}\n\nconst projectsData = new KanbanProjectsProvider();\n\nconst workspaceRoot = vscode.workspace.workspaceFolders?.[0].uri.fsPath;\nif (workspaceRoot) {\n        const projectsFilePath = path.join(workspaceRoot, \"Projects.md\");\n        if (fs.existsSync(projectsFilePath)) {\n                const watcher = vscode.workspace.createFileSystemWatcher(projectsFilePath);\n                watcher.onDidChange(() => {\n                        projectsData.refresh();\n                });\n        }\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n        // Use the console to output diagnostic information (console.log) and errors (console.error)\n        // This line of code will only be executed once when your extension is activated\n        console.log('Congratulations, your extension \"code-kanban\" is now active!');\n\n        // context.subscriptions.push(vscode.window.registerWebviewViewProvider(\"projects\", new MyWebviewViewProvider(context)));\n        // vscode.window.registerTreeDataProvider(\"projectsData\", new KanbanProjectsProvider());\n        vscode.window.createTreeView(\"kanban.projects\", {\n                treeDataProvider: projectsData,\n        });\n\n        // The command has been defined in the package.json file\n        // Now provide the implementation of the command with registerCommand\n        // The commandId parameter must match the command field in package.json\n        const disposable = vscode.commands.registerCommand(\"code-kanban.helloWorld\", () => {\n                // The code you place here will be executed every time your command is executed\n                // Display a message box to the user\n                vscode.window.showInformationMessage(\"Hello VS-Code!\");\n        });\n\n        context.subscriptions.push(disposable);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","vscode","window","createTreeView","treeDataProvider","projectsData","disposable","commands","registerCommand","showInformationMessage","subscriptions","push","KanbanProjectsProvider","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","this","event","getTreeItem","element","getChildren","workspaceRoot","workspace","workspaceFolders","uri","fsPath","projectsFilePath","path","join","fs","existsSync","lines","readFileSync","split","projects","line","startsWith","projectTitle","substring","TreeItem","refresh","fire","createFileSystemWatcher","onDidChange","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}